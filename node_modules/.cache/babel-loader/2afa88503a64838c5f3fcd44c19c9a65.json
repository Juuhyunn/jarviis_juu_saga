{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  historyLoading: false,\n  historyData: null,\n  error: null\n};\nconst historySlice = createSlice({\n  name: \"histories\",\n  initialState,\n  reducers: {\n    historyRequest(state, _action) {\n      alert(\"여기 누구있어요?\");\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historySuccess(state, action) {\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    //리스트\n    historyListRequest(state, _action) {\n      alert(\"여기 누구있어요?\");\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyListSuccess(state, action) {\n      // console.log(JSON.stringify(action.payload))\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyListFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    history: historySlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = historySlice;\nexport const {\n  historyRequest,\n  historySuccess,\n  historyFailure,\n  historyListRequest,\n  historyListSuccess,\n  historyListFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/bitcamp/____/진행중/typescript-jarviis-frontend/src/features/history/reducer/historySlice.ts"],"names":["configureStore","createSlice","initialState","historyLoading","historyData","error","historySlice","name","reducers","historyRequest","state","_action","alert","historySuccess","action","payload","historyFailure","historyListRequest","historyListSuccess","historyListFailure","store","reducer","history","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA2D,kBAA3D;AAoDA,MAAMC,YAA0B,GAAG;AAC/BC,EAAAA,cAAc,EAAE,KADe;AAE/BC,EAAAA,WAAW,EAAE,IAFkB;AAG/BC,EAAAA,KAAK,EAAE;AAHwB,CAAnC;AAMA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,WADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAsBC,OAAtB,EAA6D;AACvEC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAF,MAAAA,KAAK,CAACP,cAAN,GAAuB,IAAvB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KALK;;AAMNQ,IAAAA,cAAc,CAACH,KAAD,EAAsBI,MAAtB,EAAgE;AAC1EJ,MAAAA,KAAK,CAACP,cAAN,GAAuB,KAAvB;AACAO,MAAAA,KAAK,CAACN,WAAN,GAAoBU,MAAM,CAACC,OAA3B;AACH,KATK;;AAUNC,IAAAA,cAAc,CAAEN,KAAF,EAAuBI,MAAvB,EAA2D;AACrEJ,MAAAA,KAAK,CAACP,cAAN,GAAsB,IAAtB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH,KAbK;;AAcN;AACAE,IAAAA,kBAAkB,CAACP,KAAD,EAAsBC,OAAtB,EAA8D;AAC5EC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAF,MAAAA,KAAK,CAACP,cAAN,GAAuB,IAAvB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KAnBK;;AAoBNa,IAAAA,kBAAkB,CAACR,KAAD,EAAsBI,MAAtB,EAAgE;AAC9E;AACAJ,MAAAA,KAAK,CAACP,cAAN,GAAuB,KAAvB;AACAO,MAAAA,KAAK,CAACN,WAAN,GAAoBU,MAAM,CAACC,OAA3B;AACH,KAxBK;;AAyBNI,IAAAA,kBAAkB,CAAET,KAAF,EAAuBI,MAAvB,EAA2D;AACzEJ,MAAAA,KAAK,CAACP,cAAN,GAAsB,IAAtB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH;;AA5BK;AAHmB,CAAD,CAAhC;AAqCA,MAAMK,KAAK,GAAGpB,cAAc,CAAC;AACzBqB,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAEhB,YAAY,CAACe;AADf;AADgB,CAAD,CAA5B;AAOA,MAAM;AAAEA,EAAAA,OAAF;AAAWE,EAAAA;AAAX,IAAuBjB,YAA7B;AAEA,OAAO,MAAM;AACTG,EAAAA,cADS;AAETI,EAAAA,cAFS;AAGTG,EAAAA,cAHS;AAITC,EAAAA,kBAJS;AAKTC,EAAAA,kBALS;AAMTC,EAAAA;AANS,IAOTI,OAPG;AASP,eAAeF,OAAf","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\nexport interface HistoryDataPayload {\n    // id: number\n    // log_type: string,\n    // contents: string,\n    // location: string,\n    // address: string,\n    // log_date: string,\n    // weather: string,\n    data: {\n        id: number;\n        x: string;\n        y: string;\n        location: string;\n        address: string;\n        log_date: string;\n        weather: string;\n        log_type: string;\n        contents: string;\n        user_id: number;\n\n    }\n}\nexport interface ListDataPayload{\n    data:{\n        user_id:number;\n        date:string;\n    }\n    \n}\n\nexport interface HistoryPayload{\n        id: number;\n        location: string;\n        address: string;\n        log_date: string;\n        weather: string;\n        log_type: string;\n        contents: string;\n        user_id: number;\n}\n\nexport interface HistoryState {\n    historyLoading: boolean;\n    historyData: any;\n    error: any;\n}\nexport interface ParamType {\n    id: number;\n}\nconst initialState: HistoryState = {\n    historyLoading: false,\n    historyData: null,\n    error: null,\n};\n\nconst historySlice = createSlice({\n    name: \"histories\",\n    initialState,\n    reducers: {\n        historyRequest(state: HistoryState, _action: PayloadAction<HistoryPayload>){\n            alert(\"여기 누구있어요?\")\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historySuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>){\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyFailure( state: HistoryState, action: PayloadAction<{error: any}>){\n            state.historyLoading= true;\n            state.error = action.payload;\n        },\n        //리스트\n        historyListRequest(state: HistoryState, _action: PayloadAction<ListDataPayload>){\n            alert(\"여기 누구있어요?\")\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyListSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>){\n            // console.log(JSON.stringify(action.payload))\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyListFailure( state: HistoryState, action: PayloadAction<{error: any}>){\n            state.historyLoading= true;\n            state.error = action.payload;\n        },\n\n    }\n})\n\n\nconst store = configureStore({\n    reducer: {\n      history: historySlice.reducer,\n    },\n  });\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = historySlice;\n\nexport const {\n    historyRequest,\n    historySuccess,\n    historyFailure,\n    historyListRequest,\n    historyListSuccess,\n    historyListFailure\n} = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}